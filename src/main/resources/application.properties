spring.application.name=user-service

# generación aleatoria por instancia con 0
server.port=0

eureka.client.service-url.defaultZone = http://localhost:8761/eureka
eureka.instance.instance-id = ${spring.application.name}:${instanceId:${random.value}}

# agrupamos los processors de Axon
# - Tracking distintos threads para Aggregate/Handlers: si hay errorMessage reintenta la ejecución de ese thread con periodo incremental de espera
# - Subscribing mismo thread para Aggregate/Handlers: si hay errorMessage bloquea el thread y lo propaga
axon.eventhandling.processors.product-group.mode = subscribing
logging.level.org.axonframework.axonserver.connector.event.axon.AxonServerEventStore=DEBUG

server.errorMessage.include-message = always
server.errorMessage.include-binding-errors = always